{{- if gt .Values.authReplicaCount 0.0 -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "rucio.fullname" . }}-auth.config.yaml
  labels:
    app: {{ template "rucio.name" . }}-auth
    chart: "{{ .Chart.Name }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
type: Opaque
data:
  {{- $common_config := .Values.config | default dict | mustToPrettyJson | b64enc }}
  common.json: {{ $common_config | quote }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "rucio.fullname" . }}-auth
  labels:
    app: {{ template "rucio.name" . }}-auth
    chart: {{ template "rucio.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.authReplicaCount }}
  selector:
    matchLabels:
      app: {{ template "rucio.name" . }}-auth
      release: {{ .Release.Name }}
  strategy:
    type: {{ .Values.strategy.type }}
{{- if eq .Values.strategy.type "RollingUpdate" }}
    {{- with .Values.strategy.rollingUpdate }}
    rollingUpdate:
{{ toYaml . | trim | indent 6 }}
    {{- end }}
{{- end }}
  minReadySeconds: {{ .Values.minReadySeconds.authServer }}
  template:
    metadata:
      labels:
        app: {{ template "rucio.name" . }}-auth
        release: {{ .Release.Name }}
      annotations:
        checksum/config: {{ $common_config | sha1sum }}
    spec:
    {{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
    {{- end }}
      volumes:
      - name: config
        secret:
          secretName: {{ template "rucio.fullname" . }}-auth.config.yaml
      - name: httpdlog
        emptyDir: {}
      {{- range $collection := tuple (coalesce .Values.secretMounts .Values.additionalSecrets)}}
      {{- range $key, $val := $collection }}
      - name: {{ kindIs "int" $key | ternary (coalesce $val.volumeName $val.secretName $val.secretFullName) $key }}
        secret:
          secretName: {{ coalesce $val.secretFullName (printf "%s-%s" $.Release.Name $val.secretName) }}
      {{- end}}
      {{- end}}
      {{- range $key, $val := .Values.persistentVolumes }}
      - name: {{ $key }}
        persistentVolumeClaim:
          claimName: {{ $val.name }}
      {{- end}}
{{- if .Values.useDeprecatedImplicitSecrets }}
{{- if .Values.useSSL.authServer }}
      - name: hostcert
        secret:
          secretName: {{ .Release.Name }}-auth-hostcert
      - name: hostkey
        secret:
          secretName: {{ .Release.Name }}-auth-hostkey
      - name: cafile
        secret:
          secretName: {{ .Release.Name }}-auth-cafile
{{- end }}
{{- end }}
      containers:
{{- if .Values.exposeErrorLogs.authServer }}
        - name: httpd-error-log
          image: busybox
          args: [/bin/sh, -c, 'tail -n+1 -F /var/log/httpd/error_log']
          volumeMounts:
          - name: httpdlog
            mountPath: /var/log/httpd
          resources:
{{ toYaml .Values.errorLogsExporterResources | indent 12 }}            
{{- end }}
{{- if .Values.monitoring.enabled }}
        - name: apache-exporter
          image: rucio/apache_exporter
{{- if .Values.useSSL.authServer }}
          args: ['--telemetry.address=:{{ .Values.monitoring.exporterPort }}', '--scrape_uri=https://localhost/server-status/?auto', '--insecure']
{{ else }}
          args: ['--telemetry.address=:{{ .Values.monitoring.exporterPort }}']
{{ end }}
          ports:
            - name: metrics
              containerPort: {{ .Values.monitoring.exporterPort }}
              protocol: TCP
{{- end }}
        - name: {{ .Chart.Name }}-auth
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
{{ toYaml .Values.authServerResources | indent 12 }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
{{- if .Values.monitoring.enabled }}
            - name: metrics
              containerPort: {{ .Values.monitoring.nativeMetricsPort }}
              protocol: TCP
{{- end }}
          readinessProbe:
            httpGet:
              path: /ping
{{- if .Values.useSSL.server }}
              scheme: HTTPS
              port: 443
{{- else }}
              port: 80
{{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.authServer.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.authServer.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.authServer.timeoutSeconds }}
          livenessProbe:
            httpGet:
              path: /ping
{{- if .Values.useSSL.authServer }}
              scheme: HTTPS
              port: 443
{{- else }}
              port: 80
{{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.authServer.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.authServer.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.authServer.timeoutSeconds }}
          volumeMounts:
            - name: config
              mountPath: /opt/rucio/etc/conf.d/10_common.json
              subPath: common.json
            - name: httpdlog
              mountPath: /var/log/httpd
            {{- range $collection := tuple (coalesce .Values.secretMounts .Values.additionalSecrets)}}
            {{- range $key, $val := $collection }}
            {{- /* TODO: depreacte and remove support for subPaths (at plural) case */}}
            {{-  if $val.subPaths }}
            {{-   range $val.subPaths }}
            - name: {{ kindIs "int" $key | ternary (coalesce $val.volumeName $val.secretName $val.secretFullName) $key }} 
              mountPath: {{ $val.mountPath }}{{ . }}
              subPath: {{ . }}
            {{-   end}}
            {{-  else }}
            - name: {{ kindIs "int" $key | ternary (coalesce $val.volumeName $val.secretName $val.secretFullName) $key }} 
              mountPath: {{ $val.mountPath }}
              subPath: {{ $val.subPath }}
            {{-  end}}
            {{- end}}
            {{- end}}
            {{- range $key, $val := .Values.persistentVolumes }}
            - name: {{ $key }}
              mountPath: {{ $val.mountPath }}
            {{- end}}
{{- if .Values.useDeprecatedImplicitSecrets }}
{{- if .Values.useSSL.authServer }}
            - name: hostcert
              mountPath: /etc/grid-security/hostcert.pem
              subPath: hostcert.pem
            - name: hostkey
              mountPath: /etc/grid-security/hostkey.pem
              subPath: hostkey.pem
            - name: cafile
              mountPath: /etc/grid-security/ca.pem
              subPath: ca.pem
{{- end }}
{{- end }}
          env:
            {{- range $key, $val := .Values.httpd_config }}
            - name: RUCIO_HTTPD_{{ $key | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ template "rucio.fullname" $ }}.cfg
                  key: {{ $key }}
            {{- end}}
            {{- range $key1, $val1 := .Values.optional_config }}
            - name: {{ $key1 | upper }}
              value: "{{ $val1  }}"
            {{- end}}
{{- if .Values.useSSL.authServer }}
            - name: RUCIO_ENABLE_SSL
              value: "True"
            - name: OPENSSL_ALLOW_PROXY_CERTS
              value: "1"
{{- else }}
            - name: RUCIO_ENABLE_SSL
              value: "False"
{{- end }}
{{- if .Values.monitoring.enabled }}
            - name: RUCIO_METRICS_PORT
              value: "{{ .Values.monitoring.nativeMetricsPort }}"
{{- end }}
            - name: RUCIO_SERVER_TYPE
              value: "{{ .Values.serverType.authServer }}"
            - name: RUCIO_CFG_API_ENDPOINTS
              value: "auth,ping"
            - name: RUCIO_OVERRIDE_CONFIGS
              value: "/opt/rucio/etc/conf.d/"
            - name: RUCIO_LOG_FORMAT
              value: '{{ .Values.logFormat.authServer }}'
            - name: RUCIO_WSGI_DAEMON_PROCESSES
              value: "{{ .Values.wsgi.daemonProcesses }}"
            - name: RUCIO_WSGI_DAEMON_THREADS
              value: "{{ .Values.wsgi.daemonThreads }}"
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
{{- end }}
