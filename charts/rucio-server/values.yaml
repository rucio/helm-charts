# Default values for rucio.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## replicaCount gives the number of server pods to run
replicaCount: 0

useDeprecatedImplicitSecrets: true

# When set, run extra busybox containers in the relevant pods to also expose the error logs
exposeErrorLogs: true

errorLogsExporterResources:
  limits:
    cpu: 30m
    memory: 50Mi
  requests:
    cpu: 20m
    memory: 20Mi

# Set to true to enable SSL support for the different servers to be able accept X509 certificates and proxies.
useSSL: false

image:
  repository: rucio/rucio-server
  tag: release-34.2.0
  pullPolicy: Always

imagePullSecrets: []
# - name: docker-regcreds

service:
  type: ClusterIP
  port: 80
  targetPort: 80
  protocol: TCP
  name: http
  annotations: {}
    # loadbalancer.openstack.org/network-id: "<id>"
    # service.beta.kubernetes.io/openstack-internal-load-balancer: "true"
    # loadbalancer.openstack.org/cascade-delete: "false"
  loadBalancerIP: null
  loadBalancerClass: null
  externalTrafficPolicy: null
  allocateLoadBalancerNodePorts: true

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 1

minReadySeconds: 5

readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5

livenessProbe:
  initialDelaySeconds: 10
  periodSeconds: 20
  timeoutSeconds: 5

serverType: api

logFormat: '[%{%Y-%m-%d %H:%M:%S}t]\t%v\t%h\t%{X-Forwarded-For}i\t%{X-Rucio-RequestId}i\t%>s\t%I\t%B\t%D\t\"%r\"\t\"%{X-Rucio-Auth-Token}i\"\t\"%{User-Agent}i\"\t%{X-Rucio-Script}i'

monitoring:
  enabled: false
  # default to true to preserve chart behavior
  serviceMonitorEnabled: true
  exporterPort: 8080
  targetPort: 8080
  nativeMetricsPort: 8081
  interval: 30s
  telemetryPath: /metrics
  namespace: monitoring
  labels:
    release: prometheus-operator
  serviceMonitor:
    ## Metric relabel configs to apply to samples before ingestion.
    ##
    metricRelabelings: []
    # - action: keep
    #   regex: 'kube_(daemonset|deployment|pod|namespace|node|statefulset).+'
    #   sourceLabels: [__name__]

    #   relabel configs to apply to samples before ingestion.
    ##
    relabelings: []
    # - sourceLabels: [__meta_kubernetes_pod_node_name]
    #   separator: ;
    #   regex: ^(.*)$
    #   targetLabel: nodename
    #   replacement: $1
    #   action: replace

metricsExporterResources:
  limits:
    cpu: 30m
    memory: 50Mi
  requests:
    cpu: 20m
    memory: 20Mi

ftsRenewal:
  enabled: 0
  schedule: "42 */6 * * *"
  image:
    repository: rucio/fts-cron
    tag: 34.2.0
    pullPolicy: Always
  servers: "https://fts3-devel.cern.ch:8446,https://cmsfts3.fnal.gov:8446,https://fts3.cern.ch:8446,https://lcgfts3.gridpp.rl.ac.uk:8446,https://fts3-pilot.cern.ch:8446"
  script: 'default'  # one of: 'default', 'atlas', 'dteam', 'multi_vo', 'tutorial', 'escape'. The associated scripts can be found here: https://github.com/rucio/containers/tree/master/fts-cron
  vos:
    - vo: "cms"
      voms: "cms:/cms/Role=production"
  secretMounts: []
    # - secretName: fts-cert
    #   mountPath: /opt/rucio/certs/usercert.pem
    #   subPath: usercert.pem
    # - secretName: fts-key
    #   mountPath: /opt/rucio/certs/new_userkey.pem
    #   subPath: new_userkey.pem
    # - secretName: longproxy
    #   mountPath: /opt/rucio/certs/long.proxy
    #   subPath: long.proxy
  additionalEnvs: []
    # - name: RUCIO_FTS_SECRETS
    #   value: release-rucio-x509up
    # - name: USERCERT_NAME
    #   value: "usercert.pem"
    # - name: USERKEY_NAME
    #   value: "new_userkey.pem"
    # - name: RUCIO_LONG_PROXY
    #   value: long.proxy
    # - name: GRID_PASSPHRASE
    #   valueFrom:
    #     secretKeyRef:
    #       name:
    #       key:
  resources:
    limits:
      cpu: 500m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

automaticRestart:
  enabled: 0
  image:
    repository: bitnami/kubectl
    tag: 1.29.4
    pullPolicy: IfNotPresent
  schedule: "0 0 * * *"
  selectorLabel: app=rucio-server
  resources:
    limits:
      cpu: 500m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

secretMounts: []
  # - volumeName: gcssecret
  #   secretName: gcssecret
  #   mountPath: /opt/rucio/etc/gcs_rucio.json
  #   subPath: gcs_rucio.json

hostPathMounts: []
  # - volumeName: igtf-ca
  #   hostPath: /etc/grid-security/certificates/
  #   mountPath: /etc/grid-security/certificates/
  #   readOnly: true
  #   type: DirectoryOrCreate

additionalEnvs: []
  # - name: NODE_IP
  #   valueFrom:
  #     fieldRef:
  #       status.hostIP

wsgi:
  daemonProcesses: "4"
  daemonThreads: "4"

## values used to configure apache
httpd_config:
  # mpm_mode: "event"
  # enable_status: "True"
  # legacy_dn: "False"
  # keep_alive: "On"
  # keep_alive_timeout: "5"
  # max_keep_alive_requests: "128"
  # server_limit: "10"
  # start_servers: "4"
  # thread_limit: "128"
  # threads_per_child: "128"
  # min_spare_threads: "256"
  # max_spare_threads: "512"
  # max_request_workers: "1280"
  # max_connections_per_child: "2048"
  # max_clients: "20"
  # mpm_mode: "worker"

ingress:
  enabled: false
  # ingressClassName: traefik
  annotations: {}
    # traefik.ingress.kubernetes.io/frontend-entry-points: http
    # traefik.ingress.kubernetes.io/redirect-entry-point: https
  path: /
  hosts: []
  #   - my.rucio.test
  tls:
    - secretName: rucio-server.tls-secret
  secrets:
  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using kube-lego, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  # - name: rucio-server.tls-secret
  #   key: |+
  #     -----BEGIN RSA PRIVATE KEY-----
  #     -----END RSA PRIVATE KEY-----
  #   certificate: |+
  #     -----BEGIN CERTIFICATE-----
  #     -----END CERTIFICATE-----

## values used to configure Rucio
config:
  # common:
    ## config.common.logdir: the default directoy to write logs to (default: "/var/log/rucio")
    # logdir: "/var/log/rucio"
    ## config.common.logdir: the max loglevel (default: "DEBUG")
    # loglevel: "DEBUG"
    ## config.common.mailtemplatedir: directory containing the mail templates (default: "/opt/rucio/etc/mail_templates")
    # mailtemplatedir: "/opt/rucio/etc/mail_templates"

  # database:
    ## config.database.default: the connection string for the database (default: "sqlite:////tmp/rucio.db")
    # default: "sqlite:////tmp/rucio.db"
    ## config.database.schema: the schema used in the DB. only necessary when using Oracle.
    # schema: ""
    ## config.database.pool_reset_on_return: set the “reset on return” behavior of the pool (default: "rollback")
    # pool_reset_on_return: "rollback"
    ## config.database.echo: flag to control the logging of all statements to stdout (default: "0")
    # echo: "0"
    ## config.database.po0l_recycle: this setting causes the pool to recycle connections after the given number of seconds has passed (default: "600")
    # pool_recycle: "600"
    ## config.database.pool_size: the number of connections to keep open inside the connection pool
    # pool_size: ""
    ## config.database.pool_timeout: number of seconds to wait before giving up on getting a connection from the pool
    # pool_timeout: ""
    ## config.database.maxoverflow: the number of connections to allow in connection pool "overflow"
    # max_overflow: ""
    ## config.database.powuseraccount: user used to check the DB
    # powuseraccount: ""
    ## config.database.powuseraccount: password for user used to check the DB
    # powuserpassword: ""

  # monitor:
    ## config.monitor.carbon_server: address of carbon server used for graphite monitoring (default: "localhost")
    # carbon_server: "localhost"
    ## config.monitor.carbon_port: port of carbon server used for graphite monitoring (default: "8125")
    # carbon_server: "8125"
    ## config.monitor.user_scope: scope used on the graphite server (default: "default_docker")
    # user_scope: "default_docker"

  ## only necessary if the server is configurated to receive traces
  # trace:
    ## config.trace.tracedir: directory where traces are written to (default "/var/log/rucio/trace")
    # tracedir: "/var/log/rucio/trace"
    ## config.trace.brokers: address of ActiveMQ brokers (default: "localhost")
    # brokers: "localhost"
    ## config.trace.brokers: port of ActiveMQ brokers (default: "61013")
    # port: "61013"
    ## config.trace.brokers: port of ActiveMQ brokers (default: "/topic/rucio.trace")
    # topic: "/topic/rucio.tracer"
    ## config.trace.username: username for the topic (if necessary)
    # username: ""
    ## config.trace.password: password for the topic (if necessary)
    # password: ""

  # policy:
    ## config.permission.policy: (default "generic")
    # permission: "generic"
    ## config.permission.schema: (default "generic")
    # schema: "generic"
    ## config.permission.lfn2pfn_algorithm_default: (default "hash")
    # lfn2pfn_algorithm_default: "hash"
    ## config.permission.support: (default "https://github.com/rucio/rucio/issues/")
    # support: "https://github.com/rucio/rucio/issues/"
    ## config.permission.support_rucio: (default "https://github.com/rucio/rucio/issues/")
    # support_rucio: "https://github.com/rucio/rucio/issues/"

  ## Only necessary for webui deployments
  # webui:
    ## config.webui.usercert:  (default "/opt/rucio/etc/usercert_with_key.pem")
    # usercert: "/opt/rucio/etc/usercert_with_key.pem"

serverResources: {}
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
