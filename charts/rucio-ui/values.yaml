# Default values for rucio.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## replicaCount gives the number of server pods to run
replicaCount: 1

useDeprecatedImplicitSecrets: true

# When set, run extra busybox containers in the relevant pods to also expose the error logs
exposeErrorLogs: true

service:
  # Enable useSSL and run the webui server on port 443 instead of 80 in order to
  # accept X509 certificates and proxies for authentication
  useSSL: false
  # Type of service to create, supports NodePort, LoadBalancer, and ClusterIP
  type: ClusterIP
  port: 80
  targetPort: 80
  protocol: TCP
  name: http
  # if service type is NodePort, set the nodePort value
  # nodePort: 30734
  annotations:
    {}
    # loadbalancer.openstack.org/network-id: "<id>"
    # service.beta.kubernetes.io/openstack-internal-load-balancer: "true"
    # loadbalancer.openstack.org/cascade-delete: "false"
  loadBalancerIP: null
  loadBalancerClass: null
  externalTrafficPolicy: null
  allocateLoadBalancerNodePorts: true

image:
  repository: rucio/rucio-ui
  tag: release-34.0.0
  pullPolicy: Always

imagePullSecrets: []
# - name: docker-regcreds

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 1

minReadySeconds: 5

proxy:
  rucioProxy: "<rucio-server-host>"
  rucioProxyScheme: "https"
  rucioAuthProxy: "<rucio-auth-server-host>"
  rucioAuthProxyScheme: "https"

ingress:
  enabled: false
  # ingressClassName: traefik
  annotations:
    {}
    # traefik.ingress.kubernetes.io/frontend-entry-points: http
    # traefik.ingress.kubernetes.io/redirect-entry-point: https
  path: /
  hosts: []
  #   - my.rucio.test
  tls:
    - secretName: rucio-server.tls-secret
  secrets:
  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using kube-lego, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  # - name: rucio-server.tls-secret
  #   key: |+
  #     -----BEGIN RSA PRIVATE KEY-----
  #     -----END RSA PRIVATE KEY-----
  #   certificate: |+
  #     -----BEGIN CERTIFICATE-----
  #     -----END CERTIFICATE-----

## Additional secrets to be mounted as files in the ui container.
## Use this to mount certificates, ca-files for httpd.
## You can also use this to mount sections of rucio.cfg file. In this case, the mount path
## should be in the /opt/rucio/etc/conf.d/<file_name>.cfg format.
secretMounts:
# - volumeName: gcssecret
#   secretName: gcssecret
#   mountPath: /opt/rucio/etc/gcs_rucio.json
#   subPath: gcs_rucio.json

## values used to configure apache
httpd_config:
  legacy_dn: "False"
  rucio_hostname: "my-rucio-ui.example.com"
  # mpm_mode: "event"
  # start_servers: "1"
  # min_spare_threads: "1"
  # max_spare_threads: "20"
  # threads_per_child: "5"
  # max_clients: "20"
  # max_requests_per_child: "8192"

## values used to configure Rucio
config:
  # common:
  ## config.common.logdir: the default directoy to write logs to (default: "/var/log/rucio")
  # logdir: "/var/log/rucio"
  ## config.common.logdir: the max loglevel (default: "DEBUG")
  # loglevel: "DEBUG"
  ## config.common.mailtemplatedir: directory containing the mail templates (default: "/opt/rucio/etc/mail_templates")
  # mailtemplatedir: "/opt/rucio/etc/mail_templates"

  database:
    {}
    ## config.database.default: the connection string for the database (default: "sqlite:////tmp/rucio.db")
    # default: "sqlite:////tmp/rucio.db"
    ## config.database.schema: the schema used in the DB. only necessary when using Oracle.
    # schema: ""
    ## config.database.pool_reset_on_return: set the “reset on return” behavior of the pool (default: "rollback")
    # pool_reset_on_return: "rollback"
    ## config.database.echo: flag to control the logging of all statements to stdout (default: "0")
    # echo: "0"
    ## config.database.po0l_recycle: this setting causes the pool to recycle connections after the given number of seconds has passed (default: "600")
    # pool_recycle: "600"
    ## config.database.pool_size: the number of connections to keep open inside the connection pool
    # pool_size: ""
    ## config.database.pool_timeout: number of seconds to wait before giving up on getting a connection from the pool
    # pool_timeout: ""
    ## config.database.maxoverflow: the number of connections to allow in connection pool "overflow"
    # max_overflow: ""
    ## config.database.powuseraccount: user used to check the DB
    # powuseraccount: ""
    ## config.database.powuseraccount: password for user used to check the DB
    # powuserpassword: ""

  # policy:
  ## config.permission.policy: (default "generic")
  # permission: "generic"
  ## config.permission.schema: (default "generic")
  # schema: "generic"
  ## config.permission.lfn2pfn_algorithm_default: (default "hash")
  # lfn2pfn_algorithm_default: "hash"
  ## config.permission.support: (default "https://github.com/rucio/rucio/issues/")
  # support: "https://github.com/rucio/rucio/issues/"
  ## config.permission.support_rucio: (default "https://github.com/rucio/rucio/issues/")
  # support_rucio: "https://github.com/rucio/rucio/issues/"

# Additional environment variables to be set in the container.
# For a list, please see: https://github.com/rucio/containers/blob/master/ui/README.md
optional_config: {}

resources:
  {}
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
